/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package code.admin;

import code.database.Database;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class frmCategory extends javax.swing.JFrame {

    /**
     * Creates new form frmCategory
     */
    public frmCategory() {
        initComponents();
        initializeTable();
        loadCategories();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        btnCategory = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Categorias");

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCategory);

        btnCategory.setText("Nueva categoría");
        btnCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCategoryActionPerformed(evt);
            }
        });

        btnBack.setText("Regresar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(161, 161, 161)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCategory)
                                .addGap(24, 24, 24)
                                .addComponent(btnBack)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCategory)
                    .addComponent(btnBack))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCategoryActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(null, "Ingresa el nombre de la nueva categoría");

        Database db = new Database();

        String[] params = {name};

        int rowsAffected = db.update("INSERT INTO category (name) VALUES (?)", params);

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Categoría creada con éxito");
            loadCategories();
        }
    }//GEN-LAST:event_btnCategoryActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        dispose();
        try {
            new code.view().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Supplier.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCategory().setVisible(true);
            }
        });
    }

    private void initializeTable() {
        tblCategory.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int row = tblCategory.getSelectedRow();
                if (row != -1) {
                    handleRowDoubleClick(row);
                }
            }
        });
    }

    private void handleRowDoubleClick(int row) {
        int selectedRow = tblCategory.getSelectedRow();
        if (selectedRow != -1) {

            Database db = new Database();
            ResultSet rs = db.executeQuery("SELECT * FROM category", new String[0]);

            try {

                String categoryId = tblCategory.getValueAt(selectedRow, 0).toString();
                String categoryName = tblCategory.getValueAt(selectedRow, 1).toString();

                if (rs != null && rs.next()) {
                    // Mostrar opciones al usuario
                    String[] options = {"Editar", "Eliminar", "Cancelar"};
                    int choice = JOptionPane.showOptionDialog(
                            this,
                            "¿Qué acción deseas realizar con la categoría \"" + categoryName + "\"?",
                            "Opciones para la categoría",
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null,
                            options,
                            options[0]
                    );

                    switch (choice) {
                        case 0 -> {

                            String name = JOptionPane.showInputDialog(null, "Ingresa el nuevo nombre de la categoría");

                            String[] params = {name, categoryId};

                            int rowsAffected = db.update("UPDATE category SET name = ? WHERE id = ?", params);

                            if (rowsAffected > 0) {
                                loadCategories();

                                JOptionPane.showMessageDialog(null, "Categoría actualizada con éxito");
                            }
                        }

                        case 1 -> {
                            int opt = JOptionPane.showConfirmDialog(
                                    null,
                                    "¿Deseas eliminar la categoría \"" + categoryName + "\"?",
                                    "Confirmación",
                                    JOptionPane.YES_NO_OPTION,
                                    JOptionPane.QUESTION_MESSAGE
                            );

                            if (opt == JOptionPane.YES_OPTION) {
                                String[] params = {categoryId};
                                db.update("DELETE FROM category WHERE id = ?", params);
                                JOptionPane.showMessageDialog(null, "Categoría eliminada con éxito.");
                                loadCategories(); // Recargar la tabla después de eliminar
                            } else {
                                JOptionPane.showMessageDialog(null, "Acción cancelada.");
                            }
                        }

                        case 2 -> {
                            JOptionPane.showMessageDialog(null, "Acción cancelada");
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al cargar el libro.");
                }
            } catch (SQLException ex) {
                Logger.getLogger(frmCategory.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadCategories() {
        Database db = new Database();

        ResultSet rs = db.executeQuery("SELECT * FROM category", new String[0]);

        if (rs != null) {
            buildTable(rs); // Llama a buildTable directamente
        }
    }

    private void buildTable(ResultSet rs) {
        // Configurar el modelo de la tabla con las columnas necesarias
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Nombre"}, 0);

        try {
            while (rs.next()) { // Aquí es donde el cursor avanza a la siguiente fila
                String id = rs.getString("id");
                String name = rs.getString("name");
                model.addRow(new Object[]{id, name});
            }
            tblCategory.setModel(model); // Establece el modelo actualizado en la tabla
        } catch (SQLException ex) {
            Logger.getLogger(frmCategory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCategory;
    // End of variables declaration//GEN-END:variables
}
