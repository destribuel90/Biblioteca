/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package code;

import code.database.Database;
import code.helpers.Auth;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class frmPurchase extends javax.swing.JFrame {

    /**
     * Creates new form frmPurchase
     */
    public frmPurchase() {
        initComponents();
        loadUserPurchases(Integer.parseInt(Auth.userData[0]));
        initializeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPurchase = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Mis compras");

        tblPurchase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Libro", "Fecha de compra", "Cantidad", "Costo por unidad", "Costo total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPurchase);
        if (tblPurchase.getColumnModel().getColumnCount() > 0) {
            tblPurchase.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setText("Regresar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(276, 276, 276))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(293, 293, 293))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        dispose();
        try {
            new code.view().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(frmPurchase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPurchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPurchase().setVisible(true);
            }
        });
    }

    private void initializeTable() {
        tblPurchase.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int row = tblPurchase.getSelectedRow();
                if (row != -1) {
                    handleRowDoubleClick(row);
                }
            }
        });
    }

    private void handleRowDoubleClick(int row) {
        int selectedRow = tblPurchase.getSelectedRow();
        if (selectedRow != -1) {

            String bookTitle = tblPurchase.getValueAt(selectedRow, 0).toString(); // Suponiendo que el título está en la primera columna

            String[] params = {bookTitle};

            Database db = new Database();
            ResultSet rs = db.executeQuery("SELECT * FROM book WHERE title = ?", params);

            try {
                if (rs != null && rs.next()) {
                    String bookPublisher = rs.getString("publisher"); // Ajusta según la columna
                    String bookAuthor = rs.getString("author"); // Ajusta según la columna
                    // Mostrar JOptionPane para preguntar si desea redactar reseña
                    int choice = JOptionPane.showConfirmDialog(
                            this,
                            "¿Deseas redactar una reseña para el libro \"" + bookTitle + "\"?",
                            "Redactar reseña",
                            JOptionPane.YES_NO_OPTION
                    );

                    if (choice == JOptionPane.YES_OPTION) {
                        // Abrir el formulario de reseña
                        frmReview.bookId = rs.getInt("id");
                        openReviewForm(bookTitle, bookPublisher, bookAuthor);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al cargar el libro.");
                }
            } catch (SQLException ex) {
                Logger.getLogger(frmPurchase.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void openReviewForm(String bookTitle, String bookPublisher, String bookAuthor) {
        frmReview reviewForm = new frmReview();

        // Establecer datos en el formulario de reseña
        reviewForm.setBookDetails(bookTitle, bookPublisher, bookAuthor);

        // Mostrar el formulario
        reviewForm.setVisible(true);
    }

    private void loadUserPurchases(int userId) {
        Database db = new Database();

        // Consulta para obtener las compras del usuario
        ResultSet rs = db.executeQuery(
                "SELECT b.title, p.purchase_date, p.quantity, p.cost_per_unit, p.total_cost "
                + "FROM Purchase p "
                + "JOIN Book b ON p.book_id = b.id "
                + "WHERE p.user_id = ?",
                new String[]{String.valueOf(userId)}
        );

        buildTable(rs);
    }

    private void buildTable(ResultSet rs) {
        // Configurar el modelo de la tabla con las columnas necesarias
        DefaultTableModel model = new DefaultTableModel(
                new String[]{"Libro", "Fecha de compra", "Cantidad", "Costo por unidad", "Costo total"},
                0
        );

        try {
            while (rs != null && rs.next()) {
                // Extraer los datos del ResultSet
                String title = rs.getString("title");
                String purchaseDate = rs.getString("purchase_date");
                String quantity = rs.getString("quantity");
                String costPerUnit = rs.getString("cost_per_unit");
                String totalCost = rs.getString("total_cost");

                // Agregar una fila al modelo con los datos obtenidos
                model.addRow(new Object[]{title, purchaseDate, quantity, costPerUnit, totalCost});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar las compras: " + e.getMessage());
        }

        // Asignar el modelo actualizado a la tabla
        tblPurchase.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPurchase;
    // End of variables declaration//GEN-END:variables
}
