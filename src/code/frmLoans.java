/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package code;

import code.database.Database;
import code.helpers.Auth;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class frmLoans extends javax.swing.JFrame {

    /**
     * Creates new form frmLoans
     */
    public frmLoans() {
        initComponents();
        loadUserLoans(Integer.parseInt(Auth.userData[0]));
        initializeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoan = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Mis préstamos actuales");

        tblLoan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Libro", "Fecha de retorno", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLoan);

        btnBack.setText("Regresar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(126, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(288, 288, 288))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(34, 34, 34))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        dispose();
        try {
            new code.view().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(frmLoans.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmLoans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmLoans().setVisible(true);
            }
        });
    }

    private void loadUserLoans(int userId) {
        Database db = new Database();

        // Consulta para obtener los préstamos del usuario
        ResultSet rs = db.executeQuery(
                "SELECT b.title, l.return_date, l.status, l.id "
                + "FROM Loan l "
                + "JOIN Book b ON l.book_id = b.id "
                + "WHERE l.user_id = ?",
                new String[]{String.valueOf(userId)}
        );

        buildLoanTable(rs);
    }

    private void buildLoanTable(ResultSet rs) {
        // Configurar el modelo de la tabla con las columnas necesarias
        DefaultTableModel model = new DefaultTableModel(
                new String[]{"ID de péstamo", "Libro", "Fecha de retorno", "Estado"},
                0
        );

        try {
            while (rs != null && rs.next()) {
                // Extraer los datos del ResultSet
                String loanId = String.valueOf(rs.getInt("id"));
                String title = rs.getString("title");
                String returnDate = rs.getString("return_date");
                String status = rs.getString("status");

                //Sólo mostrar los préstamos pendientes 
                if (!"returned".equals(status)) {
                    // Agregar una fila al modelo con los datos obtenidos
                    model.addRow(new Object[]{loanId, title, returnDate, status});
                }

            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar los préstamos: " + e.getMessage());
        }

        // Asignar el modelo actualizado a la tabla
        tblLoan.setModel(model);
    }

    private void initializeTable() {
        tblLoan.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int row = tblLoan.getSelectedRow();
                if (row != -1) {
                    handleRowDoubleClick(row);
                }
            }
        });
    }

    private void handleRowDoubleClick(int row) {
        int selectedRow = tblLoan.getSelectedRow();

        if (selectedRow != -1) {

            // Obtenemos el ID del préstamo seleccionado desde la tabla
            String loanId = tblLoan.getValueAt(selectedRow, 0).toString(); // Supongamos que la columna 0 contiene el ID

            Database db = new Database();

            // Consultamos el estado actual del préstamo en la base de datos
            ResultSet rs = db.executeQuery("SELECT status, return_date FROM loan WHERE id = ?", new String[]{loanId});

            try {
                if (rs != null && rs.next()) {
                    String status = rs.getString("status"); // Estado actual del préstamo
                    Date dueDate = rs.getDate("return_date"); // Fecha de vencimiento

                    // Determinamos si está overdue
                    boolean isOverdue = false;
                    if (dueDate != null) {
                        Date currentDate = new Date(); // Fecha actual
                        isOverdue = currentDate.after(dueDate); // Comparamos las fechas
                    }

                    // Lógica para mostrar opciones
                    String[] options = {"Devolver", "Cancelar"};
                    int choice = JOptionPane.showOptionDialog(
                            this,
                            "¿Qué acción deseas realizar?",
                            "Opciones del préstamo",
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null, // Icono
                            options,
                            options[0]
                    );

                    // Ejecutamos la acción seleccionada
                    switch (choice) {
                        case 0 -> { // Devolver
                            // Si ya está "returned" o "overdue", mostramos un mensaje y no hacemos nada
                            if ("returned".equalsIgnoreCase(status)) {
                                JOptionPane.showMessageDialog(this, "El préstamo ya fue devuelto.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                // Actualizamos el estado a "returned"
                                int rowsAffected = db.update("UPDATE loan SET status = 'returned' WHERE id = ?", new String[]{loanId});
                                if (rowsAffected > 0) {
                                    JOptionPane.showMessageDialog(this, "Préstamo marcado como devuelto.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                                    loadUserLoans(Integer.parseInt(Auth.userData[0]));
                                } else {
                                    JOptionPane.showMessageDialog(this, "Error al actualizar el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        case 1 -> { // Cancelar
                            // Otras acciones según sea necesario
                            JOptionPane.showMessageDialog(this, "Acción cancelada.", "Cancelar", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(frmLoans.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al consultar el préstamo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLoan;
    // End of variables declaration//GEN-END:variables
}
